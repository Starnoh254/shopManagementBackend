// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql" // You can change this to "postgresql" or "sqlite"
  url      = env("DATABASE_URL")
}

// USERS MODULE
model User {
  id                 Int                @id @default(autoincrement())
  email              String             @unique
  password           String
  name               String?
  shopName           String?
  customers          Customer[]
  debts              Debt[]
  payments           Payment[]
  creditTransactions CreditTransaction[]
  createdAt          DateTime           @default(now())
}

// CUSTOMERS MODULE - Only customer information (NO debt info)
model Customer {
  id                 Int                @id @default(autoincrement())
  name               String
  phone              String             @unique
  email              String?
  address            String?
  creditBalance      Float              @default(0)  // Track overpayments as credit
  userId             Int
  user               User               @relation(fields: [userId], references: [id])
  debts              Debt[]             // Relation to debts
  payments           Payment[]          // Relation to payments
  creditTransactions CreditTransaction[] // Relation to credit transactions
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @default(now()) @updatedAt
  
  @@index([userId])
  @@index([phone])
}

// DEBT MODULE - Only debt information
model Debt {
  id          Int       @id @default(autoincrement())
  customerId  Int
  customer    Customer  @relation(fields: [customerId], references: [id])
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  amount      Float
  description String?
  dueDate     DateTime?
  isPaid      Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt  // Added default value
  
  @@index([customerId])
  @@index([userId, isPaid])
  @@index([createdAt])
}

// PAYMENT MODULE - Only payment information
model Payment {
  id            Int           @id @default(autoincrement())
  customerId    Int
  customer      Customer      @relation(fields: [customerId], references: [id])
  userId        Int
  user          User          @relation(fields: [userId], references: [id])
  amount        Float
  appliedToDebt Float         @default(0)  // Amount applied to debt
  creditAmount  Float         @default(0)  // Amount added to credit balance
  paymentMethod PaymentMethod @default(CASH)
  description   String?
  reference     String?       // Receipt number, M-Pesa code, etc.
  createdAt     DateTime      @default(now())
  
  @@index([customerId])
  @@index([userId])
  @@index([createdAt])
}

enum PaymentMethod {
  CASH
  MPESA
  BANK_TRANSFER
  OTHER
}

// CREDIT TRANSACTION MODULE - Track credit balance changes
model CreditTransaction {
  id          Int               @id @default(autoincrement())
  customerId  Int
  customer    Customer          @relation(fields: [customerId], references: [id])
  userId      Int
  user        User              @relation(fields: [userId], references: [id])
  amount      Float             // Positive = credit added, Negative = credit used
  type        CreditTransactionType
  description String?
  relatedDebtId Int?            // If credit was applied to a specific debt
  relatedPaymentId Int?         // If credit came from an overpayment
  createdAt   DateTime          @default(now())
  
  @@index([customerId])
  @@index([userId])
  @@index([createdAt])
}

enum CreditTransactionType {
  OVERPAYMENT_ADDED     // Credit added from overpayment
  APPLIED_TO_DEBT       // Credit used to pay debt
  MANUAL_ADJUSTMENT     // Manual credit adjustment
}
